import asyncio
import os
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
TRIBUTE_LINK = os.getenv("TRIBUTE_LINK")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ—Å—Ç–∞–º (user_id: index)
user_progress = {}

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive",
]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–æ—Å—Ç–æ–≤
main_ws = client.open(SPREADSHEET_NAME).sheet1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ report
try:
    report_ws = client.open(SPREADSHEET_NAME).worksheet("report")
except Exception:
    sh = client.open(SPREADSHEET_NAME)
    report_ws = sh.add_worksheet(title="report", rows="1000", cols="5")
    report_ws.append_row(["DateTime Moscow", "UserID", "Start", "Paid", "Status"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ greeting
try:
    greeting_ws = client.open(SPREADSHEET_NAME).worksheet("greeting")
except Exception:
    greeting_ws = client.open(SPREADSHEET_NAME).add_worksheet(title="greeting", rows="10", cols="1")
    greeting_ws.update("A1", [["Welcome Message"], ["üöÄ –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'."]])

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã

def load_posts():
    return main_ws.get_all_records()

def get_greeting():
    try:
        return greeting_ws.cell(2, 1).value
    except Exception:
        logging.exception("Failed to load greeting message")
        return "–ü—Ä–∏–≤–µ—Ç!"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def send_post(user_id: int, post_index: int):
    posts = load_posts()
    if post_index >= len(posts):
        await bot.send_message(user_id, "‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    post = posts[post_index]
    content = post.get('content', '')
    media_type = post.get('media_type', '').strip().lower()
    file_url = post.get('file_url', '').strip()
    with_button = str(post.get('pay_button', '')).strip().lower() == 'true'

    buttons = []
    if with_button and TRIBUTE_LINK:
        buttons.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=TRIBUTE_LINK)])
    buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{post_index+1}")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        if media_type == "text":
            await bot.send_message(user_id, content, reply_markup=markup)
        elif media_type == "photo":
            await bot.send_photo(user_id, photo=file_url, caption=content, reply_markup=markup)
        elif media_type == "video":
            await bot.send_video(user_id, video=file_url, caption=content, reply_markup=markup)
        elif media_type == "document":
            await bot.send_document(user_id, document=file_url, caption=content, reply_markup=markup)
        elif media_type == "audio":
            await bot.send_audio(user_id, audio=file_url, caption=content, reply_markup=markup)
        elif media_type == "voice":
            await bot.send_voice(user_id, voice=file_url, caption=content, reply_markup=markup)
        elif media_type == "video_note":
            await bot.send_video_note(user_id, video_note=file_url)
        else:
            logging.warning(f"Unknown media type '{media_type}' for user {user_id}")
    except Exception:
        logging.exception(f"Error sending post to {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"User {user_id} started sequence")

    try:
        greeting = get_greeting()
        await message.answer(greeting)
    except Exception:
        await message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'.")

    try:
        now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
        report_ws.append_row([now, str(user_id), "Yes", "No", "Subscribed"])
    except Exception:
        logging.exception(f"Failed to log /start for {user_id}")

    user_progress[user_id] = 0
    await send_post(user_id, 0)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
@dp.callback_query(F.data.startswith("next_"))
async def handle_next(callback: CallbackQuery):
    user_id = callback.from_user.id
    next_index = int(callback.data.split("_")[1])
    user_progress[user_id] = next_index
    await send_post(user_id, next_index)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def handle_stop(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    try:
        report_ws.append_row([now, str(user_id), "No", "No", "Unsubscribed"])
    except Exception:
        logging.exception(f"Failed to log /stop for {user_id}")
    await message.answer("üëã –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paid
async def handle_paid(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    try:
        report_ws.append_row([now, str(user_id), "", "Yes", "Subscribed"])
    except Exception:
        logging.exception(f"Failed to log /paid for {user_id}")
    await message.answer("‚úÖ –û—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É. –°–ø–∞—Å–∏–±–æ!")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥
dp.message.register(handle_start, Command(commands=["start"]))
dp.message.register(handle_stop, Command(commands=["stop"]))
dp.message.register(handle_paid, Command(commands=["paid"]))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    logging.info("Bot is starting polling now...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
