import asyncio
import os
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
TRIBUTE_LINK = os.getenv("TRIBUTE_LINK")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive",
]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
worksheet = client.open(SPREADSHEET_NAME).sheet1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ report
try:
    report_ws = client.open(SPREADSHEET_NAME).worksheet("report")
except gspread.WorksheetNotFound:
    sh = client.open(SPREADSHEET_NAME)
    report_ws = sh.add_worksheet(title="report", rows="1000", cols="5")
    report_ws.append_row(["DateTime Moscow", "UserID", "Start", "Paid", "Status"])

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã

def load_posts():
    return worksheet.get_all_records()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def send_post(user_id: int, post: dict):
    content = post.get('content', '')
    media_type = post.get('media_type', '').strip().lower()
    file_url = post.get('file_url', '').strip()
    with_button = str(post.get('pay_button', '')).strip().lower() == 'true'

    markup = None
    if with_button and TRIBUTE_LINK:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=TRIBUTE_LINK)]
        ])

    try:
        if media_type == "text":
            await bot.send_message(user_id, content, reply_markup=markup)
        elif media_type == "photo":
            await bot.send_photo(user_id, photo=file_url, caption=content, reply_markup=markup)
        elif media_type == "video":
            await bot.send_video(user_id, video=file_url, caption=content, reply_markup=markup)
        elif media_type == "document":
            await bot.send_document(user_id, document=file_url, caption=content, reply_markup=markup)
        elif media_type == "audio":
            await bot.send_audio(user_id, audio=file_url, caption=content, reply_markup=markup)
        elif media_type == "voice":
            await bot.send_voice(user_id, voice=file_url, caption=content, reply_markup=markup)
        elif media_type == "video_note":
            await bot.send_video_note(user_id, video_note=file_url)
        else:
            logging.warning(f"Unknown media type '{media_type}' for user {user_id}")
    except Exception as e:
        logging.error(f"Error sending post to {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"User {user_id} started sequence")
    await message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

    # === –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ report ===
    try:
        now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
        report_ws.append_row([
            now,
            str(user_id),
            "Yes",
            "No",
            "Subscribed"
        ])
        logging.info("Report: added test row")
    except Exception as e:
        logging.error(f"Report test failed: {e}")
    # === –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞ ===

    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤
    posts = load_posts()
    for post in posts:
        delay = int(post.get('delay_minutes', 0))
        await asyncio.sleep(delay * 60)
        await send_post(user_id, post)

async def handle_stop(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    report_ws.append_row([now, str(user_id), "No", "No", "Unsubscribed"])
    await message.answer("üëã –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start.")

async def handle_paid(message: types.Message):
    user_id = message.from_user.id
    now = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    report_ws.append_row([now, str(user_id), "", "Yes", "Subscribed"])
    await message.answer("‚úÖ –û—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É. –°–ø–∞—Å–∏–±–æ!")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from aiogram.filters import Command

dp.message.register(handle_start, Command(commands=["start"]))
dp.message.register(handle_stop, Command(commands=["stop"]))
dp.message.register(handle_paid, Command(commands=["paid"]))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç-–ø–æ–ª–ª–∏–Ω–≥–∞
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
